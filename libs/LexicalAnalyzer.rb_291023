require_relative 'version.rb'
require_relative 'syntaxPTW.rb'

module RubyScript2CAPL

class LexicalAnalyzer
  attr_accessor :keywords, :error, :errorList, :specialChar
  attr_accessor :includeFiles, :functionNames, :variableNames

  def initialize(sourceFile)
    puts "Script lexical converter version #{VERSIONLEXICALCONVERTER} Initialized"

    @typeOfToken = "K_NA" #Keyword notAvailable  
    @typeOfOperand = "O_NA" #Operand notAvailable  
    @typeOfRelation = "R_NA" #Relationship notAvailable  

    @openCloseCompound = 0;
    @openCloseBraket = 0;
    @openCloseParant = 0;
    @openCloseBraces = 0;
    @compoundVariable = Array.new
    @line = ""
    @word = ""
    @wordLast = ""
    @wordIndex = 0
    @word2Special = false
    @special2Word = false
    @specialWord = ""
    @specialWordLast = ""
    @haveWord = false
    @haveWordOldState = @haveWord
    @gotoNextLine = false
    @currentToken = "T_NA"
    @isCompound = false
    @isParanthesis = false
    @isBraket = false
    @isBraces = false
    @operandWord = "" 
    @sourceFile = sourceFile
    @fileCursorPosition = 0
    @wordIndex = 0
    @fileContent = File.open(sourceFile)
    @debugLexical = false
    @keywords = SyntaxPTW.new()
    @includeFiles = Array.new
    @functionNames = Hash.new # {"functionName" => {0 => "param1", 1 => "param2"}
    @variableNames = Array.new
    @error = Hash.new #{ "Error Name" => {0 => "Linenumber",     1 => "whatkindoferror",       2 => "awaiting values are"               }
                      #    generated         codeGenerated      key@errorList=>0 or 1       generated based on relations
    @errorList = {0 => "not a relationship", 1 => "forbidenRelation" }
    @specialChar = [
                      "(", 
                      ")", 
                      "[", 
                      "]", 
                      "{", 
                      "}", 
                      ";", 
                      ":", 
                      ",", 
                      ".", 
                      "\"",
                      "'", 
                      "_", 
                      "-",
                      "+",
                      "=",
                      "?",
                      " ",
                      "#",
                      "|",
                      "<",
                      ">",
                      "\/",
                      "\\",
                      "~",
                      "!",
                      "@",
                      "$",
                      "%",
                      "^",
                      "&",
                      "*",
                      "\n",
                      "\t",
                      "\r",
                      "?"
                   ]
  end

  def activateLexicalDebugger
    @debugLexical = true
  end

  def getTranslatedFileName()
    return @file2Convert_name
  end

  def setFileHeadPosition(position)
    @fileHeadPosition = poistion
  end

  def getFileHeadPosition
    return @fileHeadPosition
  end

  def checker(file2Convert)
    puts "Script lexical converter Started"
    parseAndTranslateToSyntax()
    puts "Script lexical converter Done"
  end

  def toggle(variable)
    if (variable)
      return false
    else
      return true
    end
  end

  def parseAndTranslateToSyntax()
    #typeOfToken = "K_NA" #Keyword notAvailable  
    #typeOfOperand = "O_NA" #Operand notAvailable  
    #typeOfRelation = "R_NA" #Relationship notAvailable  

    #openCloseCompound = 0;
    #openCloseBraket = 0;
    #openCloseParant = 0;
    #openCloseBraces = 0;
    #compoundVariable = Array.new

    @fileContent.seek(@fileCursorPosition, IO::SEEK_SET)
    puts("#{File.basename(__FILE__)}:#{__LINE__} @fileCursorPostion #{@fileCursorPosition}")

    #watch for the reentry... possible will start from the the beginning of the line!!!
    #line = ""
    #word = ""
    #wordLast = ""
    #@wordIndex = 0
    #word2Special = false
    #special2Word = false
    #specialWord = ""
    #specialWordLast = ""
    #haveWord = false
    #haveWordOldState = haveWord
    #gotoNextLine = false
    #currentToken = "T_NA"
    #isCompound = false
    #isParanthesis = false
    #isBraket = false
    #isBraces = false
    #operandWord = "" 
    @fileContent.each_char do |chr|
      puts "#{File.basename(__FILE__)}:#{__LINE__} char:#{chr}"
      @line = @line + chr 

      @line.gsub!(/\r\n?/,"\n")
      puts("#{File.basename(__FILE__)}:#{__LINE__} LINE: #{@line}")
      #charsFromLine = line.split("")
#      charsFromLine.each_with_index.map do |chr, chr_idx|
        if !specialChar.include?(chr)
          puts "#{File.basename(__FILE__)}:#{__LINE__} if !specialChar.include?(#{chr}) "
          if !@operandWord.empty?
            puts "#{File.basename(__FILE__)}:#{__LINE__} if !operandWord.empty? #{@operandWord}) "
            @operandFound = @keywords.isOperand?(@operandWord)
            if @operandFound != "O_NA" and (@word.empty?)
              puts "#{File.basename(__FILE__)}:#{__LINE__} if operandFound != \"O_NA\" and (word.empty?) #{@operandFound}) #{@word}"
              @fileCursorPosition = @fileContent.pos
              puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@operandFound}")
              return "#{@operandFound} "
              @wordIndex = @wordIndex + 1
              @operandWord = ""
            end
          end
          @word = @word + chr
        elsif @specialChar.include?(chr)
          puts "#{File.basename(__FILE__)}:#{__LINE__} elsif specialChar.include?(#{chr}) "
          case chr
          when ' ', "\n", "\t", "\r" #new word?
            puts "#{File.basename(__FILE__)}:#{__LINE__} when ' ', '\\n', '\\t', '\\r' "
            if !@word.empty? and @openCloseCompound == 0
              @typeOfToken = @keywords.isToken?(@word)
              if (@typeOfToken != "T_NA")
                puts "#{File.basename(__FILE__)}:#{__LINE__} if (typeOfToken != \"T_NA\" #{@typeOfToken} "
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__}  return typeOfToken: #{@typeOfToken}")
                return "#{@typeOfToken} "
                @wordIndex = @wordIndex + 1
              else
                if @isCompound
                  puts "#{File.basename(__FILE__)}:#{__LINE__} if isCompound #{@isCompound} "
                  @fileCursorPosition = @fileContent.pos
                  puts("#{File.basename(__FILE__)}:#{__LINE__} return S_VALUE #{@word}")
                  return "S_VALUE #{@word}"
                  @wordIndex = @wordIndex + 1
                else
                  if @keywords.isNumeric?(@word)
                    puts "#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isNumeric?(word) #{@word}"
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return N_VALUE #{@word}")
                    return "N_VALUE #{@word} "
                    @wordIndex = @wordIndex + 1
                  elsif @keywords.isAlphaNumeric?(@word)
                    puts "#{File.basename(__FILE__)}:#{__LINE__} elsif @keywords.isAlphaNumeric?(word) #{@word}"
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return I_VALUE #{@word}")
                    return "I_VALUE #{@word} "
                    @wordIndex = @wordIndex + 1
                  end
                end
              end
              @wordLast = @word
              @word = ""
              if ((chr == '\n') or (chr == '\r'))
                @wordIndex = 0
              end
            elsif @openCloseCompound > 0
              @word = @word + chr
            end
            @operandFound = @keywords.isOperand?(@operandWord)
            if @operandFound != "O_NA" and (@word.empty?)
              puts("#{File.basename(__FILE__)}:#{__LINE__} if operandFound != \"O_NA\" and (word.empty?) #{@operandFound} #{@word}")
              @fileCursorPosition = @fileContent.pos
              puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@operandFound}")
              return "#{@operandFound} "
              @wordIndex = @wordIndex + 1
              @operandWord = ""
            end
          when '"'
            puts("#{File.basename(__FILE__)}:#{__LINE__} when '\"'")
            if ['?', '~', '^', '!', '+', '-', '%', '/', '*','>','<','=','&','|','(', ',', '[', ']', ')', '{', '}',';'].include? operandWord
              puts("#{File.basename(__FILE__)}:#{__LINE__} if ['?', '~', '^', '!', '+', '-', '%', '/', '*','>','<','=','&','|','(', ',', '[', ']', ')', '{', '}',';'].include? operandWord #{@operandWord}")
              @operandFound = @keywords.isOperand?(@operandWord)
              if @operandFound != "O_NA" and (@word.empty?)
                puts("#{File.basename(__FILE__)}:#{__LINE__} if operandFound != \"O_NA\" and (word.empty?) #{@operandFound} #{@word}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@operandFound}")
                return "#{@operandFound} "
                @wordIndex = @wordIndex + 1
                @operandWord = ""
              end
            end
            @operandWord = @operandWord + chr
            @openCloseCompound = @openCloseCompound + 1
            if ( (@openCloseCompound % 2) == 0 )
              puts("#{File.basename(__FILE__)}:#{__LINE__} if ( (openCloseCompound % 2) == 0 ) #{@openCloseCompound}")
              @isCompound = true
              @openCloseCompound = 0
              @operandFound = @keywords.isOperand?(@operandWord)
              @fileCursorPosition = @fileContent.pos
              puts("#{File.basename(__FILE__)}:#{__LINE__} return S_VALUE #{@word} #{@operandFound}")
              return "S_VALUE #{@word} #{@operandFound} "
              @operandWord = ""
              @wordLast = @word
              @word = ""
            end
          when '#'
            puts("#{File.basename(__FILE__)}:#{__LINE__} when '#'")
            if !@word.empty? and @openCloseCompound == 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} if !word.empty? and openCloseCompound == 0 #{@word} #{@operandCompound}")
              @typeOfToken = @keywords.isToken?(@word)
              if (@typeOfToken != "T_NA")
                puts("#{File.basename(__FILE__)}:#{__LINE__} if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@typeOfToken}")
                return "#{@typeOfToken} "
                @wordIndex = @wordIndex + 1
              else
                puts("#{File.basename(__FILE__)}:#{__LINE__} else of if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                if @isCompound
                  puts("#{File.basename(__FILE__)}:#{__LINE__} if isCompound #{@isCompound}")
                  @fileCursorPosition = @fileContent.pos
                  puts("#{File.basename(__FILE__)}:#{__LINE__} return S_VALUE #{@word}")
                  return "S_VALUE #{@word} "
                else
                  puts("#{File.basename(__FILE__)}:#{__LINE__} else of if isCompound #{@isCompound}")
                  if @keywords.isNumeric?(@word)
                    puts "#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isNumeric?(word) #{@word}"
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return N_VALUE #{@word}")
                    return "N_VALUE #{@word} "
                  elsif @keywords.isAlphaNumeric?(@word)
                    puts "#{File.basename(__FILE__)}:#{__LINE__} elsif @keywords.isAlphaNumeric?(word) #{@word}"
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return I_VALUE #{@word}")
                    return "I_VALUE #{@word} "
                  end
                end
              end
              @wordLast = @word
              @word = ""
            elsif @openCloseCompound > 0
              @word = @word + chr
            end
            if @openCloseCompound == 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} break #{@openCloseCompound}")
              @line = ""
              @word = ""
              @wordLast = ""
              @wordIndex = 0
              @word2Special = false
              @special2Word = false
              @specialWord = ""
              @specialWordLast = ""
              @haveWord = false
              @haveWordOldState = @haveWord
              @gotoNextLine = false
              @currentToken = "T_NA"
              @isCompound = false
              @isParanthesis = false
              @isBraket = false
              @isBraces = false
              @operandWord = ""
              puts "#{File.basename(__FILE__)}:#{__LINE__} read whole line #{@fileContent.gets} "
            end
          when '?', '(', ',', '[', ']', ')', '{', '}',';'
            puts "#{File.basename(__FILE__)}:#{__LINE__} when '?', '(', ',', '[', ']', ')', '{', '}',';' "
            if !@operandWord.empty?
              puts("#{File.basename(__FILE__)}:#{__LINE__} if !operandWord.empty? #{@operandWord}")
              @operandFound = @keywords.isOperand?(@operandWord)
              if @operandFound != "O_NA" and (@word.empty?)
                puts("#{File.basename(__FILE__)}:#{__LINE__} if operandFound != \"O_NA\" and (word.empty?) #{@operandFound} #{word}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@operandFound}")
                return "#{@operandFound} "
                @operandWord = ""
              end
            end
            @operandWord = @operandWord + chr
            if !@word.empty? and @openCloseCompound == 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} if !word.empty? and openCloseCompound == 0 #{@word} #{@openCloseCompound}")
              typeOfToken = @keywords.isToken?(@word)
              if (@typeOfToken != "T_NA")
                puts("#{File.basename(__FILE__)}:#{__LINE__} if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@typeOfToken}")
                return "#{@typeOfToken} "
              else
                puts("#{File.basename(__FILE__)}:#{__LINE__} else of if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                if @isCompound
                  puts("#{File.basename(__FILE__)}:#{__LINE__} if isCompound #{@isCompound}")
                  @fileCursorPosition = @fileContent.pos
                  puts("#{File.basename(__FILE__)}:#{__LINE__} return S_VALUE #{@word}")
                  return "S_VALUE #{@word} "
                else
                  puts("#{File.basename(__FILE__)}:#{__LINE__} else of if isCompound #{@isCompound}")
                  if @keywords.isNumeric?(@word)
                    puts("#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isNumeric?(word) #{@word}")
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return N_VALUE #{@word}")
                    return "N_VALUE #{@word} "
                  elsif @keywords.isAlphaNumeric?(@word)
                    puts("#{File.basename(__FILE__)}:#{__LINE__} elsif @keywords.isAlphaNumeric?(word) #{@word}")
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return I_VALUE #{@word}")
                    return "I_VALUE #{@word} "
                  end
                end
              end
              @wordLast = @word
              word = ""
            elsif @openCloseCompound > 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} elsif @openCloseCompound > 0 #{@word}")
              @word = @word + chr
            end
          when '?', '~', ':', '^', '!', '+', '-', '%', '/', '*','>','<','=','&','|'
            puts("#{File.basename(__FILE__)}:#{__LINE__} when '?', '~', ':', '^', '!', '+', '-', '%', '/', '*','>','<','=','&','|'")
            if !@operandWord.empty? and @operandWord.include? ")"
              puts("#{File.basename(__FILE__)}:#{__LINE__} if !operandWord.empty? and operandWord.include? \")\" #{@operandWord}")
              @operandFound = @keywords.isOperand?(@operandWord)
              if @operandFound != "O_NA" and (@word.empty?)
                puts("#{File.basename(__FILE__)}:#{__LINE__} if operandFound != \"O_NA\" and (word.empty?) #{@operandFound} #{@word}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@operandFound}")
                return "#{@operandFound} "
                @wordIndex = @wordIndex + 1
                @operandWord = ""
              end
            end
            @operandWord = @operandWord + chr
            if !@word.empty? and @openCloseCompound == 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} if !word.empty? and openCloseCompound == 0 #{@word} #{@openCloseCompound}")
              @typeOfToken = @keywords.isToken?(@word)
              if (@typeOfToken != "T_NA")
                puts("#{File.basename(__FILE__)}:#{__LINE__} if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                @fileCursorPosition = @fileContent.pos
                puts("#{File.basename(__FILE__)}:#{__LINE__} return #{@typeOfToken}")
                return "#{@typeOfToken} "
                @wordIndex = @wordIndex + 1
              else
                puts("#{File.basename(__FILE__)}:#{__LINE__} else of if (typeOfToken != \"T_NA\") #{@typeOfToken}")
                if @isCompound
                   puts("#{File.basename(__FILE__)}:#{__LINE__} if isCompound #{@isCompound}")
                   @fileCursorPosition = @fileContent.pos
                   puts("#{File.basename(__FILE__)}:#{__LINE__} return S_VALUE #{@word}")
                   return "S_VALUE #{@word} "
                else
                  puts("#{File.basename(__FILE__)}:#{__LINE__} else of if isCompound #{@isCompound}")
                  if @keywords.isNumeric?(@word)
                    puts("#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isNumeric?(word) #{@word}")
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return N_VALUE #{@word}")
                    return "N_VALUE #{@word} "
                  elsif @keywords.isAlphaNumeric?(@word)
                    puts("#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isAlphaNumeric?(word) #{@word}")
                    @fileCursorPosition = @fileContent.pos
                    puts("#{File.basename(__FILE__)}:#{__LINE__} return I_VALUE #{@word}")
                    return "I_VALUE #{@word} "
                  end
                end
              end
              @wordLast = @word
              @word = ""
            elsif @openCloseCompound > 0
              puts("#{File.basename(__FILE__)}:#{__LINE__} elsif openCloseCompound #{@openCloseCompound}")
              @word = @word + chr
            end
          when '.'
            puts("#{File.basename(__FILE__)}:#{__LINE__} when '.'")
            if @keywords.isTypeOfToken(@typeOfToken)
              puts("#{File.basename(__FILE__)}:#{__LINE__} if @keywords.isTypeOfToken(typeOfToken) #{@typeOfToken}")
              @word = @word + chr
            else
              puts("#{File.basename(__FILE__)}:#{__LINE__} else of if @keywords.isTypeOfToken(typeOfToken) #{@typeOfToken}")
              @operandWord = @operandWord + chr
            end
          end
        end
      #end # charsFromLine.each_with_index.map do |chr, chr_idx|
    end
    puts "#{File.basename(__FILE__)}:#{__LINE__} file pos:#{@fileContent.pos} end of def"
  end
end #class LexicalAnalyzer

end #module RubyScript2CAPLConverter


